import argparse
import uuid
import config
import time
import os
import datetime
import logging
from logging import StreamHandler, FileHandler
from tinkoff.invest import Client, MoneyValue, OrderType, OrderDirection


# –ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TOKEN = config.TOKEN  # –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API
DEFAULT_DISCOUNT = 3  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö

SEPARATOR = "---------------------------------------"
LOG_DIR = "logs"

# –°–ø–∏—Å–æ–∫ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—è–≤–æ–∫
# - "amount": —Å—É–º–º–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
# - "discount": –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞ DEFAULT_DISCOUNT.
# - "discount_price": —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±—É–º–∞–≥–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –∏ —Å–∫–∏–¥–∫—É.
# 
# –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å–∫–∏–¥–∫–∏ –∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã, –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Ü–µ–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∑–∞—è–≤–∫–∞.
SHARES = {
    "TRUR": {"amount": 3000, "discount": 5},
    "TMOS": {"amount": 3000, "discount": 5},
    "TDIV": {"amount": 3000, "discount": 5},
    "TGLD": {"amount": 3000, "discount": 5},
    "SBER": {"amount": 3000, "discount": 5},
    "MOEX": {"amount": 3000, "discount_price": 180},
    "SU26248RMFS3": {"amount": 3000, "discount": 5},
}


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
script_dir = os.path.dirname(os.path.abspath(__file__))
log_dir = os.path.join(script_dir, LOG_DIR)
os.makedirs(log_dir, exist_ok=True)

timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
log_file = os.path.join(log_dir, f"log_{timestamp}.log")

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("my_script_logger")
logger.setLevel(logging.INFO)
logger.propagate = False

# –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
file_formatter = logging.Formatter(
        '[%(asctime)s.%(msecs)03d] %(levelname)s: %(message)s',
        datefmt='%H:%M:%S'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
file_handler = FileHandler(log_file, encoding='utf-8')
file_handler.setFormatter(file_formatter)
logger.addHandler(file_handler)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler = StreamHandler()
logger.addHandler(console_handler)
# ==============================

def money_value_to_float(money: MoneyValue) -> float:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MoneyValue –≤ float.
    """
    return round(money.units + money.nano / 1e9, 2)

def get_account_id(client: Client) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    accounts = client.users.get_accounts().accounts
    if not accounts:
        raise RuntimeError("üö® –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—á–µ—Ç–æ–≤!")
    return accounts[0].id

def get_figi(client: Client, ticker: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ —Ç–∏–∫–µ—Ä—É.
    """
    for method in [client.instruments.shares, client.instruments.etfs, client.instruments.bonds]:
        instruments = method().instruments
        figi = next((instr.figi for instr in instruments if instr.ticker == ticker), None)
        if figi:
            return figi
    raise ValueError(f"‚ùå –¢–∏–∫–µ—Ä {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

def get_share_price(client: Client, figi: str) -> float:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ FIGI.
    """
    orderbook = client.market_data.get_order_book(figi=figi, depth=1)
    instruments = client.instruments.bonds()
    bond = next((b for b in instruments.instruments if b.figi == figi), None)
    if bond:
        price_percent = money_value_to_float(orderbook.last_price)
        nominal_value = money_value_to_float(bond.nominal)
        return round((price_percent * nominal_value) / 100, 2)
    return round(money_value_to_float(orderbook.last_price), 2)

def get_lot_size(client: Client, ticker: str) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ª–æ—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ —Ç–∏–∫–µ—Ä—É.
    """
    for method in [client.instruments.shares, client.instruments.etfs, client.instruments.bonds]:
        instruments = method().instruments
        lot_size = next((instr.lot for instr in instruments if instr.ticker == ticker), None)
        if lot_size:
            return lot_size
    raise ValueError(f"‚ö†Ô∏è –õ–æ—Ç –¥–ª—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

def place_limit_order(client: Client, account_id: str, figi: str, money_amount: float, ticker: str, params: dict):
    """
    –í—ã—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É.
    """
    price = get_share_price(client, figi)
    lot_size = get_lot_size(client, ticker)
    
    discount = params.get("discount", DEFAULT_DISCOUNT)
    discount_price = params.get("discount_price")

    if discount_price:
        limit_price = discount_price
        discount_text = f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {str(discount_price).replace('.', ',')} —Ä—É–±."
    else:
        limit_price = round(price * (1 - discount / 100), 2)
        discount_text = f"–°–∫–∏–¥–∫–∞: {discount}%"

    limit_price = discount_price if discount_price else round(price * (1 - discount / 100), 2)
    
    lots = int(money_amount // (limit_price * lot_size))
    
    if lots > 0:
        planned_total_cost = lots * lot_size * limit_price
        logger.info(f"üîç –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É:")
        logger.info(f"  –¢–∏–∫–µ—Ä: {ticker}")
        logger.info(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–º–∞–≥: {lots * lot_size}")
        logger.info(f"  –¶–µ–Ω–∞ –∑–∞ –±—É–º–∞–≥—É: {str(limit_price).replace('.', ',')} —Ä—É–±.")
        logger.info(f"  –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—è–≤–∫–∏: {str(planned_total_cost).replace('.', ',')} —Ä—É–±.")
        logger.info(f"  –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {str(price).replace('.', ',')} —Ä—É–±.")
        logger.info(f"  {discount_text}")

        order_id = str(uuid.uuid4())
        client.orders.post_order(
            figi=figi,
            quantity=lots,
            account_id=account_id,
            direction=OrderDirection.ORDER_DIRECTION_BUY,
            order_type=OrderType.ORDER_TYPE_LIMIT,
            order_id=order_id,
            price=MoneyValue(units=int(limit_price), nano=int((limit_price % 1) * 1e9)),
        )

        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ {lots * lot_size} –±—É–º–∞–≥ {ticker} –ø–æ {str(limit_price).replace('.', ',')} —Ä—É–±. –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞. "
              f"(–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {str(price).replace('.', ',')} —Ä—É–±.). –°—É–º–º–∞: {str(lots * lot_size * limit_price).replace('.', ',')} —Ä—É–±.")

    else:
        logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞—è–≤–∫–∏ {ticker}")

def cancel_orders(client: Client, account_id: str):
    orders = client.orders.get_orders(account_id=account_id).orders
    for order in orders:
        logger.info(SEPARATOR)
        try:
            client.orders.cancel_order(account_id=account_id, order_id=order.order_id)
            logger.info(f"üõë –û—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞ {order.order_id}")
        except Exception as e:
            logger.info(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É {order.order_id}: {e}")


def buy_share(client: Client, account_id: str, figi: str, money_amount: float, ticker: str):
    """
    –°–æ–≤–µ—Ä—à–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—É—é –ø–æ–∫—É–ø–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É,
    –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ post_order(). –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∂–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è.
    """
    lot_size = get_lot_size(client, ticker)
    price = get_share_price(client, figi)
    lots = int(money_amount // (price * lot_size))

    if lots > 0:
        order_id = str(uuid.uuid4())
        order_response = client.orders.post_order(
            figi=figi,
            quantity=lots,
            account_id=account_id,
            direction=OrderDirection.ORDER_DIRECTION_BUY,
            order_type=OrderType.ORDER_TYPE_MARKET,
            order_id=order_id,
        )

        total_price = lots * lot_size * price
        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ {lots * lot_size} –±—É–º–∞–≥ {ticker} –ø–æ {str(price).replace('.', ',')} —Ä—É–±. –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞. "
              f"(–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {str(price).replace('.', ',')} —Ä—É–±.). –°—É–º–º–∞: {str(total_price).replace('.', ',')} —Ä—É–±.")


        real_price = None
        if order_response.executed_order_price:
            real_price = money_value_to_float(order_response.executed_order_price)
            logger.info(f"üí∞ –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ {ticker}: {str(real_price).replace('.', ',')} —Ä—É–±.")
            return

        for attempt in range(5):
            time.sleep(1)
            
            positions = client.operations.get_portfolio(account_id=account_id).positions
            for position in positions:
                if position.figi == figi and position.average_position_price:
                    real_price = money_value_to_float(position.average_position_price)
                    break

            if real_price:
                break

        if real_price:
            logger.info(f"üí∞ –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ {ticker}: {real_price:.2f} —Ä—É–±.")
        else:
            logger.info(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ {ticker}, API –Ω–µ —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    else:
        logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {ticker}")



def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ Tinkoff API.",formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-m", "--mode", type=int, choices=[1, 2, 3], required=True,
                        help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n"
                            "1 - –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∏–∂–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω,\n"
                            "2 - –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫,\n"
                            "3 - –ü–æ–∫—É–ø–∫–∞ –ø–æ —Ä—ã–Ω–∫—É")
    args = parser.parse_args()

    logger.info(
        r"""
======================================================================================================================
 _______ _       _            ___    ___    _______              _ _                 ______             _            
(_______|_)     | |          / __)  / __)  (_______)            | (_)               / _____)           (_)       _   
    _    _ ____ | |  _ ___ _| |__ _| |__       _  ____ _____  __| |_ ____   ____   ( (____   ____  ____ _ ____ _| |_ 
   | |  | |  _ \| |_/ ) _ (_   __|_   __)     | |/ ___|____ |/ _  | |  _ \ / _  |   \____ \ / ___)/ ___) |  _ (_   _)
   | |  | | | | |  _ ( |_| || |    | |        | | |   / ___ ( (_| | | | | ( (_| |   _____) | (___| |   | | |_| || |_ 
   |_|  |_|_| |_|_| \_)___/ |_|    |_|        |_|_|   \_____|\____|_|_| |_|\___ |  (______/ \____)_|   |_|  __/  \__)
                                                                          (_____|                        |_|         
                                                    Tinkoff Trading Script
======================================================================================================================
"""
    )
    
    with Client(TOKEN) as client:
        account_id = get_account_id(client)
        logger.info(f"üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π ID —Å—á–µ—Ç–∞: {account_id}")
        
        if args.mode == 1:
            logger.info("\nüöÄ --- –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ ---")
            for ticker, params in SHARES.items():
                logger.info(SEPARATOR)
                try:
                    figi = get_figi(client, ticker)
                    place_limit_order(client, account_id, figi, params["amount"], ticker, params)
                except Exception as e:
                    logger.info(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {ticker}: {e}")

        elif args.mode == 2:
            logger.info("\n‚õî --- –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ ---")
            cancel_orders(client, account_id)

        elif args.mode == 3:
            logger.info("\nüí∏ --- –ü–æ–∫—É–ø–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ ---")
            for ticker, params in SHARES.items():
                logger.info(SEPARATOR)
                try:
                    figi = get_figi(client, ticker)
                    buy_share(client, account_id, figi, params["amount"], ticker)
                except Exception as e:
                    logger.info(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ {ticker}: {e}")

if __name__ == "__main__":
    main()
